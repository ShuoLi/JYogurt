package edu.jhu.cs.oose.fall2012.group1.jyogurt;

import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;

import android.app.ListActivity;
import android.content.Intent;
import android.os.Bundle;
import android.os.StrictMode;
import android.view.Menu;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;
import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.Message;
import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.MessageListAdapter;
import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.SettingUtil;
import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.XMLHandlerMessageList;

/**
 * The class for the management of message
 * @author Hang Ou, Zaoxing Liu
 *
 */
public class MessageManagement extends ListActivity {


	public final String CATE_PATH = "message";
	public final String SPEC_PATH = "get_by_user.jsp";
	public final String[] pathes = {CATE_PATH,SPEC_PATH};
	private List<Message> messageList = new ArrayList<Message>();
	private HashMap<String,String> paras = new HashMap<String,String>(); 
	
	public void onCreate(Bundle savedInstanceState) {
		StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder()
				.permitAll().build();
		StrictMode.setThreadPolicy(policy);
		super.onCreate(savedInstanceState);
		
		Intent intent = this.getIntent();
		Bundle bundle = intent.getExtras();
		String fromid = bundle.getString("user");
		String toid = bundle.getString("touser");
		paras.put("from", fromid);
		paras.put("to", toid);
		
		messageList = getListbyID();

		ArrayAdapter<Message> adapter = new ArrayAdapter<Message>(this,
				R.layout.list_row, R.id.txtTitle, messageList);
		setListAdapter(adapter);

		setListAdapter(new MessageListAdapter(this, messageList));
	}

	/**
	 * Create an options menu
	 */
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_message_management, menu);
		return true;
	}
	
	/**
	 * The function when an item in the list is clicked
	 */
	protected void onListItemClick(ListView l, View v, int position, long id) {
		Toast.makeText(MessageManagement.this, "Message Detail showed", Toast.LENGTH_LONG).show();

		messageList.get(position).getMessageId();
		Intent intent = new Intent(this, PostDetail.class);
		String messageId = messageList.get(position).getMessageId();
		Bundle bundle = new Bundle();
		bundle.putString("MESSAGEID", messageId);
		intent.putExtras(bundle);
		startActivity(intent);

	}
	
	
	/**
     * The function for getting a user's post list
     * @param path
     * @return The post list
     */
    private List<Message> getListbyID()
    {
    		List<Message> data = new ArrayList<Message>();

			DefaultHttpClient client = new DefaultHttpClient();
			HttpGet request = new HttpGet(URI.create(SettingUtil.append(pathes, paras).toString()));

			try {
				
				HttpResponse response = client.execute(request);

				if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
					SAXParserFactory spf = SAXParserFactory.newInstance();
					SAXParser sp = spf.newSAXParser();
					XMLReader xr = sp.getXMLReader();
					XMLHandlerMessageList myHandler = new XMLHandlerMessageList();
					xr.setContentHandler(myHandler);

					xr.parse(new InputSource(response.getEntity().getContent()));

					data = myHandler.getParsedData();
				} else
				{
					Message msg = new Message();
					data.add(msg);
					return data;
				}

			} catch(IllegalArgumentException e)
			{
				Toast.makeText(MessageManagement.this, "Illegal Argument Error!",
						Toast.LENGTH_SHORT).show();
				e.printStackTrace();
			}
			catch (NullPointerException e) {
				Toast.makeText(MessageManagement.this, "Null Pointer Error!",
						Toast.LENGTH_SHORT).show();
				e.printStackTrace();
			}
			catch (ClientProtocolException e) {
				Toast.makeText(MessageManagement.this, "Client Protocol Error!",
						Toast.LENGTH_SHORT).show();
				e.printStackTrace();
			} catch (IllegalStateException e) {
				Toast.makeText(MessageManagement.this, "Illegal State!",
						Toast.LENGTH_SHORT).show();
				e.printStackTrace();
			} catch (IOException e) {
				Toast.makeText(MessageManagement.this, "IO Error!", Toast.LENGTH_SHORT)
						.show();
				e.printStackTrace();
			} catch (SAXException e) {
				Toast.makeText(MessageManagement.this, "XML SAX Error!",
						Toast.LENGTH_SHORT).show();
				e.printStackTrace();
			} catch (ParserConfigurationException e) {
				Toast.makeText(MessageManagement.this, "XML Parser Error!",
						Toast.LENGTH_SHORT).show();
				e.printStackTrace();
			}
		
		return data;
	}

}
