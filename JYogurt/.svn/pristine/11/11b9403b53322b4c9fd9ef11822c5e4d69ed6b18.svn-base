package edu.jhu.cs.oose.fall2012.group1.jyogurt;

import java.io.IOException;
import java.lang.reflect.Method;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;

import android.annotation.TargetApi;
import android.app.AlertDialog;
import android.app.SearchManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnClickListener;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.drawable.Drawable;
import android.location.Address;
import android.location.Geocoder;
import android.os.Bundle;
import android.os.StrictMode;
import android.provider.SearchRecentSuggestions;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.LinearInterpolator;
import android.view.animation.TranslateAnimation;
import android.view.animation.Animation.AnimationListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.LinearLayout.LayoutParams;

import com.google.android.maps.GeoPoint;
import com.google.android.maps.ItemizedOverlay;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.MyLocationOverlay;
import com.google.android.maps.Overlay;
import com.google.android.maps.OverlayItem;
import com.google.android.maps.Projection;

import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.HttpConn;
import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.Post;
import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.SearchSuggestionProvider;
import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.SettingUtil;
import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.XMLHandlerNearbyList;
import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.XMLWriter;

/**
 * The MapActivity for google map view 1. Get the GPS location info from the
 * Android phone (Done) 2. Three menu items with three different functions (My
 * Location, Normal View, Satellite View) (Modified) 3. Add overlay pin on the
 * google map showing the nearby posts (Done)
 * 
 * @author Zaoxing Liu
 * 
 */
@TargetApi(14)
public class MapViewActivity extends MapActivity {
	/** Called when the activity is first created. */

	private final static String TAG = "bb";
	private final static int REQUESTCODE = 1;
	private final int defaultLat = 39327073;
	private final int defaultLng = -76619894;

	Intent intent;
	Bundle bundle;

	public final String CATE_BUY_PATH = "buying";
	public final String CATE_HOUSING_PATH = "housing";
	public final String CATE_SALE_PATH = "selling";
	public final String SPEC_PATH = "get_nearby_posts.jsp";
	public final String[] BUY_PATH = { CATE_BUY_PATH, SPEC_PATH };
	public final String[] SALE_PATH = { CATE_SALE_PATH, SPEC_PATH };
	public final String[] Housing_PATH = { CATE_HOUSING_PATH, SPEC_PATH };

	public MapView mapView;
	public View popView;

	private Geocoder geocoder;
	int heightAn;
	private String category;
	private List<Post> postList = new ArrayList<Post>();
	private UniversityLocationOverlay universityLocationOverlay;

	Button button;
	LinearLayout layout;
	LayoutParams layoutParams;
	SearchRecentSuggestions suggestions;
	MapController mapController;
	GeoPoint geoPoint;
	List<Overlay> list;

	/**
	 * The executions on the start of an activity
	 */
	@Override
	public void onCreate(Bundle savedInstanceState) {

		StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder()
				.permitAll().build();
		StrictMode.setThreadPolicy(policy);
		Toast.makeText(MapViewActivity.this, "Map is loading......Please wait",
				Toast.LENGTH_LONG).show();
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_map_view);
		mapView = (MapView) findViewById(R.id.mapview);

		Intent intentIn = this.getIntent();
		Bundle bundle = intentIn.getExtras();
		category = bundle.getString("category");
		String path = "";
		if (category.equals("HousingPostList")) {
			path = SettingUtil.append(Housing_PATH).toString();
		} else if (category.equals("BuyingPostList")) {
			path = SettingUtil.append(BUY_PATH).toString();
		} else if (category.equals("SellingPostList")) {
			path = SettingUtil.append(SALE_PATH).toString();
		}
		intent = new Intent(this, PostDetail.class);

		setDefaultKeyMode(DEFAULT_KEYS_SEARCH_LOCAL);

		handleIntent(getIntent());
		suggestions = new SearchRecentSuggestions(this,
				SearchSuggestionProvider.AUTHORITY,
				SearchSuggestionProvider.MODE);

		Class<MapActivity> mapactivity = MapActivity.class;
		Method[] methods = mapactivity.getDeclaredMethods();
		for (Method method : methods) {
			Log.i(TAG,
					"number of Constructor------------"
							+ method.getParameterTypes().length);
			Log.i(TAG, "method name------------" + method.getName());
		}

		postList = getNearbyList(path);

		init();
		initLocation();
		initOverlay();
		initOverlayItem();
		initPopview();
		initPoi();
	}

	/**
	 * Judge if the search is requested
	 */
	@Override
	public boolean onSearchRequested() {
		Log.i(TAG, "onSearchRequested----------------------");
		Bundle appData = new Bundle();
		appData.putString("key", "your words");
		startSearch(null, true, appData, false);

		return true;
	}

	/**
	 * Function when get a new intent
	 */
	@Override
	public void onNewIntent(Intent intent) {
		setIntent(intent);
		handleIntent(intent);
	}

	/**
	 * The function for handling the intent
	 * 
	 * @param intent
	 */
	public void handleIntent(Intent intent) {
		if (Intent.ACTION_SEARCH.equals(intent.getAction())) {
			String query = intent.getStringExtra(SearchManager.QUERY);
			suggestions.saveRecentQuery(query, null);

			Toast.makeText(this, query, Toast.LENGTH_LONG).show();
		}
	}

	/**
	 * OnResure function
	 */
	@Override
	protected void onResume() {
		super.onResume();

	}

	/**
	 * Create an options menu
	 */
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		super.onCreateOptionsMenu(menu);
		menu.add(0, 1, 0, "My Location");
		menu.add(0, 2, 1, "Route");
		menu.add(0, 3, 1, "Search");
		menu.add(0, 4, 2, "More...");
		return true;
	}

	/**
	 * The listener for animation
	 */
	private AnimationListener animationListener = new AnimationListener() {

		public void onAnimationEnd(Animation animation) {
			layout.setVisibility(View.VISIBLE);

		}

		public void onAnimationRepeat(Animation animation) {
			// TODO Auto-generated method stub

		}

		public void onAnimationStart(Animation animation) {
			// TODO Auto-generated method stub

		}

	};

	/**
	 * The behaviors when a menu item is selected
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case 1:
			universityLocationOverlay.setGeoPoint(geoPoint);
			universityLocationOverlay
					.setPositionName("Johns Hopkins University");
			mapController.animateTo(geoPoint);
			mapView.invalidate();
			break;
		case 2:
			TranslateAnimation mAnimUp = new TranslateAnimation(0, 0, -200, 0);
			// mAnimUp.setStartOffset(500);
			mAnimUp.setInterpolator(new LinearInterpolator());
			mAnimUp.setDuration(500);
			mAnimUp.setAnimationListener(animationListener);
			layout.setAnimation(mAnimUp);
			layout.startAnimation(mAnimUp);
			button = (Button) findViewById(R.id.search);
			button.setOnClickListener(new View.OnClickListener() {

				public void onClick(View v) {
					layout.setVisibility(View.INVISIBLE);

				}
			});

			break;
		case 3:
			final EditText editText = new EditText(this);
			new AlertDialog.Builder(this).setView(editText).setTitle("Search")
					.setNegativeButton("OK", new OnClickListener() {

						public void onClick(DialogInterface dialog, int which) {
							((InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE))
									.hideSoftInputFromWindow(
											editText.getWindowToken(), 0);
							searchName(editText.getText().toString());
						}

					}).show();
			break;

		}

		return true;
	}

	/**
	 * The function when an activity returns.
	 */
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		if (requestCode == REQUESTCODE) {
			Toast.makeText(this, "Return Success! ", Toast.LENGTH_LONG).show();
		}
	}

	/**
	 * Get the nearby post List
	 * 
	 * @param path
	 * @return The nearby post list
	 */
	private List<Post> getNearbyList(String path) {

		XMLWriter writer = new XMLWriter();
		String xml = writer.writeXmlNearby("39.327073", "-76.619894", "10");
		List<Post> data = new ArrayList<Post>();

		DefaultHttpClient client = new DefaultHttpClient();
		HttpPost request = new HttpPost(URI.create(path));// http request
		data = (List<Post>) HttpConn.fetchDataFromServer(xml, MapViewActivity.this, "NearbyList", client, request);
		return data;
	}

	/**
	 * Initial the Map view
	 */
	private void init() {
		mapView.setClickable(true);
		mapView.setEnabled(true);
		mapView.setTraffic(false);
		mapView.setBuiltInZoomControls(true);
		mapController = mapView.getController();
		geocoder = new Geocoder(this);
		list = mapView.getOverlays();
		universityLocationOverlay = new UniversityLocationOverlay();

		layoutParams = new LayoutParams(LayoutParams.FILL_PARENT,
				LayoutParams.FILL_PARENT);
		View view = getLayoutInflater().inflate(R.layout.search_input, null);
		heightAn = view.getHeight();
		layoutParams.setMargins(100, 100, 0, 0);
		layout = new LinearLayout(this);
		layout.addView(view);
		layout.setGravity(Gravity.TOP);
		layout.setVisibility(View.INVISIBLE);
		addContentView(layout, layoutParams);

	}

	/**
	 * Initialize the default location
	 */
	private void initLocation() {
		mapView.preLoad();
		geoPoint = new GeoPoint(defaultLat, defaultLng);
		// mapController.animateTo(geoPoint);
		mapController.setZoom(15);
		mapController.setCenter(geoPoint);
	}

	/**
	 * Initialize the default overlay
	 */
	private void initOverlay() {
		MyLocationOverlay myLocationOverlay = new MyLocationOverlay(this,
				mapView);
		myLocationOverlay.enableCompass();
		myLocationOverlay.enableMyLocation();
		list.add(myLocationOverlay);
		list.add(universityLocationOverlay);
	}

	/**
	 * Initialize the Popview on the mapview
	 */
	private void initPopview() {

		popView = super.getLayoutInflater().inflate(R.layout.overlay_layout,
				null);
		mapView.addView(popView, new MapView.LayoutParams(
				MapView.LayoutParams.WRAP_CONTENT,
				MapView.LayoutParams.WRAP_CONTENT, null,
				MapView.LayoutParams.BOTTOM_CENTER));
		popView.setVisibility(View.GONE);

	}

	/**
	 * Initialize the orange point overlay on the map
	 */
	private void initOverlayItem() {
		Drawable marker = getResources().getDrawable(R.drawable.poi_1);

		marker.setBounds(0, 0, marker.getIntrinsicWidth(),
				marker.getIntrinsicHeight());

		mapView.getOverlays().add(new MyOverItem(marker, this));
	}

	/**
	 * Initialize the Geo Points on the map
	 */
	private void initPoi() {
		Geocoder geocoder = new Geocoder(this);
		int x = geoPoint.getLatitudeE6();
		double x1 = ((double) x) / 1000000;
		int y = geoPoint.getLongitudeE6();
		double y1 = ((double) y) / 1000000;

		try {
			List<Address> lstAddress = geocoder.getFromLocation(x1, y1, 5);
			if (lstAddress.size() != 0) {

				for (int i = 0; i < lstAddress.size(); ++i) {
					Address adsLocation = lstAddress.get(i);
					Toast.makeText(getApplicationContext(),
							adsLocation.getFeatureName().toString(),
							Toast.LENGTH_LONG).show();
					Log.i(TAG, "Address found = " + adsLocation.toString());
				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * Set the route isn't displayed by default
	 */
	protected boolean isRouteDisplayed() {
		// TODO Auto-generated method stub
		return false;
	}

	/**
	 * The ontouch event when there is a motion event
	 */
	public boolean onTouchEvent(MotionEvent event) {
		Toast.makeText(getApplicationContext(), "hahahahahahaahaha",
				Toast.LENGTH_LONG).show();
		// TrackballGestureDetector trackballGestureDetector = new
		// TrackballGestureDetector
		return true;
	}

	/**
	 * Inner class for specific location's overlay
	 * 
	 * @author Zaoxing Liu
	 * 
	 */
	class UniversityLocationOverlay extends Overlay {
		private GeoPoint geoPointTemp = null;

		private String positionName = null;

		public void setGeoPoint(GeoPoint geoPoint) {
			this.geoPointTemp = geoPoint;
		}

		public void setPositionName(String positionName) {
			this.positionName = positionName;
		}

		@Override
		public void draw(Canvas canvas, MapView mapView, boolean shadow) {
			super.draw(canvas, mapView, shadow);
			Paint companypaint = new Paint();
			Point companyScreenCoords = new Point();
			if (geoPointTemp == null) {
				mapView.getProjection().toPixels(geoPoint, companyScreenCoords);
			} else {
				mapView.getProjection().toPixels(geoPointTemp,
						companyScreenCoords);
			}
			companypaint.setStrokeWidth(1);
			companypaint.setARGB(255, 255, 0, 0);
			companypaint.setStyle(Paint.Style.STROKE);
			Bitmap bmpCompany = BitmapFactory.decodeResource(getResources(),
					R.drawable.company);
			canvas.drawBitmap(bmpCompany, companyScreenCoords.x,
					companyScreenCoords.y, companypaint);
			if (positionName == null) {
				canvas.drawText("Johns Hopkins University",
						companyScreenCoords.x, companyScreenCoords.y,
						companypaint);
			} else {
				canvas.drawText(positionName, companyScreenCoords.x,
						companyScreenCoords.y, companypaint);
			}

		}
	}

	/**
	 * Search for a specific place by name and animate to there
	 * 
	 * @param positionName
	 */
	public void searchName(String positionName) {
		try {
			List<Address> list = geocoder.getFromLocationName(positionName, 1);
			if (list.size() != 0) {
				Address address = list.get(0);
				GeoPoint geoPointt = new GeoPoint(
						(int) (address.getLatitude() * 1E6),
						(int) (address.getLongitude() * 1E6));
				universityLocationOverlay.setGeoPoint(geoPointt);
				universityLocationOverlay.setPositionName(positionName);
				mapController.animateTo(geoPointt);
				mapView.invalidate();
			} else {
				Toast.makeText(this, positionName + "Address Not found!",
						Toast.LENGTH_SHORT).show();

			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * The bubble overlay inner class
	 * 
	 * @author Zaoxing Liu
	 * 
	 */
	class MyOverItem extends ItemizedOverlay<OverlayItem> {
		private List<OverlayItem> GeoList = new ArrayList<OverlayItem>();
		private Drawable marker;
		private MapViewActivity mContext;
		private GeoPoint p;

		private TextView txtTitle;
		private TextView txtDate;

		private double mLat;
		private double mLon;
		private String title;
		private String date;

		/**
		 * The constructor for inner class MyOverItem
		 * 
		 * @param marker
		 * @param context
		 */
		public MyOverItem(Drawable marker, Context context) {
			super(boundCenterBottom(marker));

			this.marker = marker;
			this.mContext = (MapViewActivity) context;

			for (int i = 0; i < postList.size(); i++) {
				mLat = Double.parseDouble(postList.get(i).getLatitude());
				mLon = Double.parseDouble(postList.get(i).getLongitude());
				title = postList.get(i).getTitle();
				date = postList.get(i).getDate();

				p = new GeoPoint((int) (mLat * 1E6), (int) (mLon * 1E6));
				GeoList.add(new OverlayItem(p, title, date));
			}
			populate();

		}

		/**
		 * the default function draw
		 */
		public void draw(Canvas canvas, MapView mapView, boolean shadow) {

			Projection projection = mapView.getProjection();
			for (int index = size() - 1; index >= 0; index--) {
				OverlayItem overLayItem = getItem(index);

				String title = overLayItem.getTitle();
				Point point = projection.toPixels(overLayItem.getPoint(), null);

				Paint paintCircle = new Paint();
				paintCircle.setColor(Color.RED);
				canvas.drawCircle(point.x, point.y, 5, paintCircle);

				Paint paintText = new Paint();
				paintText.setColor(Color.BLACK);
				paintText.setTextSize(15);
				canvas.drawText(title, point.x, point.y - 25, paintText);

			}

			super.draw(canvas, mapView, shadow);
			boundCenterBottom(marker);
		}

		/**
		 * Create an overlay item
		 */
		protected OverlayItem createItem(int i) {
			return GeoList.get(i);
		}

		/**
		 * Get overlay list's size
		 */
		public int size() {
			return GeoList.size();
		}

		/**
		 * The even when tap an overlay bubble
		 */
		protected boolean onTap(int i) {
			final int tmp = i;

			setFocus(GeoList.get(i));
			MapView.LayoutParams geoLP = (MapView.LayoutParams) mContext.popView
					.getLayoutParams();
			geoLP.point = GeoList.get(i).getPoint();
			mContext.mapView.updateViewLayout(mContext.popView, geoLP);
			mContext.popView.setVisibility(View.VISIBLE);
			txtTitle = (TextView) mContext.findViewById(R.id.map_bubbleTitle);
			txtDate = (TextView) mContext.findViewById(R.id.map_bubbleText);

			txtTitle.setText(postList.get(i).getTitle());
			txtDate.setText(postList.get(i).getDate());
			ImageView imageView = (ImageView) mContext
					.findViewById(R.id.map_bubbleImage);

			txtTitle.setOnClickListener(new View.OnClickListener() {
				public void onClick(View v) {
					Toast.makeText(MapViewActivity.this, "Post Detail showed",
							Toast.LENGTH_LONG).show();

					String postId = postList.get(tmp).getPostId();
					Bundle bundle = new Bundle();
					bundle.putString("POSTID", postId);
					bundle.putString("category", category);
					intent.putExtras(bundle);
					startActivity(intent);
				}

			});
			txtDate.setOnClickListener(new View.OnClickListener() {
				public void onClick(View v) {
					Toast.makeText(MapViewActivity.this, "Post Detail showed",
							Toast.LENGTH_LONG).show();

					String postId = postList.get(tmp).getPostId();
					Bundle bundle = new Bundle();
					bundle.putString("POSTID", postId);
					bundle.putString("category", category);
					intent.putExtras(bundle);
					startActivity(intent);
				}

			});

			imageView.setOnClickListener(new View.OnClickListener() {
				public void onClick(View v) {

					mContext.popView.setVisibility(View.GONE);
				}

			});
			// Toast.makeText(this.mContext, GeoList.get(i).getSnippet(),
			// Toast.LENGTH_SHORT).show();
			return true;
		}
	}
}
