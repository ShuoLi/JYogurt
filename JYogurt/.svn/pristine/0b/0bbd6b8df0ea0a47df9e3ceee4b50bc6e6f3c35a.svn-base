package edu.jhu.cs.oose.fall2012.group1.jyogurt;

import java.io.IOException;
import java.net.URI;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;

import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.SettingUtil;
import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.XMLHandlerLogin;
import edu.jhu.cs.oose.fall2012.group1.jyogurt.utils.XMLWriter;
import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

public class ChangePwdActivity extends Activity {

	EditText editPwd;
	EditText editNewPwd;
	EditText editNewPwdConfirm;
	Button btnSubmit;
	Button btnClear;
	TextView txtPwd;
	TextView txtNewPwd;
	TextView txtNewPwdConfirm;
	
	private String pwd;
	private String newPwd;
	private String newPwdConfirm;
	private String jhed;
	private String notification;

	public final String CATE_PATH = "user";
	public final String UPDATE_PATH = "update_password.jsp";
	public final String[] pathes = { CATE_PATH, UPDATE_PATH };

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_change_pwd);
		
		Intent intentThis = this.getIntent();
		Bundle bund = intentThis.getExtras();
		jhed = bund.getString("user");

		editPwd = (EditText) this.findViewById(R.id.editCurrentPwd);
		editNewPwd = (EditText) this.findViewById(R.id.editNewPwd);
		editNewPwdConfirm = (EditText) this.findViewById(R.id.editNewPwd2);
		btnSubmit = (Button) this.findViewById(R.id.btnSubmit);
		btnClear = (Button) this.findViewById(R.id.btnClear);
		txtPwd = (TextView) this.findViewById(R.id.txtPwd);
		txtNewPwd = (TextView) this.findViewById(R.id.txtNewPwd);
		txtNewPwdConfirm = (TextView) this.findViewById(R.id.txtNewPwd2);

		btnSubmit.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				
				pwd = editPwd.getText().toString().trim();
				newPwd = editNewPwd.getText().toString().trim();
				newPwdConfirm = editNewPwdConfirm.getText().toString().trim();
				if (!newPwd.equals(newPwdConfirm)) {
					Toast.makeText(ChangePwdActivity.this,
							"Password not match", Toast.LENGTH_SHORT).show();
				} else {

					notification = changePwd(jhed, pwd, newPwd);
				}
				Toast.makeText(ChangePwdActivity.this, notification,
						Toast.LENGTH_SHORT).show();
				ChangePwdActivity.this.finish();
			}

		});
		
		btnClear.setOnClickListener(new OnClickListener(){

			@Override
			public void onClick(View arg0) {
				
				editPwd.setText("");
				editNewPwd.setText("");
				editNewPwdConfirm.setText("");				
			}
			
		});

	}

	private String changePwd(String jhed, String oldPwd, String newPwd) {

		XMLWriter wr = new XMLWriter();
		String xml = wr.writeXmlResetPwd(jhed, oldPwd, newPwd);
		String data = new String();
		DefaultHttpClient client = new DefaultHttpClient();
		HttpPost request = new HttpPost(URI.create(SettingUtil.append(pathes)
				.toString()));

		try {
			StringEntity se = new StringEntity(xml, "UTF-8");
			request.setEntity(se);
			HttpResponse response = client.execute(request);

			if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
				SAXParserFactory spf = SAXParserFactory.newInstance();
				SAXParser sp = spf.newSAXParser();

				XMLReader xr = sp.getXMLReader();
				XMLHandlerLogin myHandler = new XMLHandlerLogin();
				xr.setContentHandler(myHandler);

				xr.parse(new InputSource(response.getEntity().getContent()));

				data = myHandler.getParsedData();
			} else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
				data = "404";
			} else if (response.getStatusLine().getStatusCode() == 500) {
				data = "500";
			} else {
				data = "error";
			}

		} catch (IllegalArgumentException e) {
			Toast.makeText(ChangePwdActivity.this, "Illegal Argument Error!",
					Toast.LENGTH_SHORT).show();
			e.printStackTrace();
		} catch (NullPointerException e) {
			Toast.makeText(ChangePwdActivity.this, "Null Pointer Error!",
					Toast.LENGTH_SHORT).show();
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			Toast.makeText(ChangePwdActivity.this, "Client Protocol Error!",
					Toast.LENGTH_SHORT).show();
			e.printStackTrace();
		} catch (IllegalStateException e) {
			Toast.makeText(ChangePwdActivity.this, "Illegal State!",
					Toast.LENGTH_SHORT).show();
			e.printStackTrace();
		} catch (IOException e) {
			Toast.makeText(ChangePwdActivity.this, "IO Error!",
					Toast.LENGTH_SHORT).show();
			e.printStackTrace();
		} catch (SAXException e) {
			Toast.makeText(ChangePwdActivity.this, "XML SAX Error!",
					Toast.LENGTH_SHORT).show();
			e.printStackTrace();
		} catch (ParserConfigurationException e) {
			Toast.makeText(ChangePwdActivity.this, "XML Parser Error!",
					Toast.LENGTH_SHORT).show();
			e.printStackTrace();
		}
		return data;

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_change_pwd, menu);
		return true;
	}

}
